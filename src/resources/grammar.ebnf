Query =
   WS (UseBlock WS LS WS)? QueryBlock;
UseBlock =
  UseRule (WS LS WS UseRule)*;
UseRule =
  KW_USE WS_MAND ModifierBlock;
QueryBlock =
  QueryItem (WS LS WS QueryItem)*;
QueryItem =
  WS ActionRule (WS_MAND ModifierBlock)?  (WS_MAND WithRule)?  (WS_MAND (OnlyRule | HideRule))? (WS_MAND FlagsRule)? WS;
ActionRule =
  ActionRuleKey WS_MAND ActionRuleValue (WS_MAND KW_AS WS_MAND ActionRuleAlias)? (WS_MAND KW_IN WS_MAND ActionRuleIn)?;
ActionRuleValue =
  Identifier;
ActionRuleAlias =
  Identifier;
ActionRuleIn =
  Identifier;
WithRule =
  KW_WITH WS_MAND WithRuleItem (WS LS WS WithRuleItem)*;
WithRuleItem =
  (WithParamName WS EQUALS_SIGN WS WithParamValue | Variable);
WithParamName =
  QueryParameterName;
WithParamValue =
  WithParamValueData ModifierList;
<WithParamValueData> =
  (Chaining | ListParam | ComplexParam | Variable | Primitive);
ListParam =
  BEGIN_LIST WS END_LIST |
  BEGIN_LIST WS WithParamValue ( WS LS WS WithParamValue )* END_LIST;
ComplexParam =
  BEGIN_OBJ WS END_OBJ |
  BEGIN_OBJ WS ComplexParamItem ( WS OBJ_SEP WS ComplexParamItem)* WS END_OBJ;
ComplexParamItem =
  ComplexParamKey WS OBJ_PROP_SEP WS WithParamValue;
ComplexParamKey =
  Identifier | String;
Chaining =
  (PathItem | PathVariable) ((CHAINING_OPERATOR)? (PathItem | <"[">? PathVariable <"]">?))+;

PathItem =
  IdentifierWithoutDot;

PathVariable =
  <"$"> IdentifierWithoutDot;

Variable =
  <"$"> Identifier;

<QueryParameterName> =
  IdentifierParameter;

OnlyRule =
  KW_ONLY WS_MAND OnlyRuleItem (WS LS WS OnlyRuleItem)*;

OnlyRuleItem =
  OnlyRuleItemName ModifierList;

<OnlyRuleItemName> =
  OnlyRuleItemPath (CHAINING_OPERATOR OnlyRuleItemPath)?+;

OnlyRuleItemPath =
  IdentifierWithoutDot | "*";

ModifierList =
  (WS MOD_OPERATOR WS Modifier)*;

Modifier =
  ModifierAlias | ModifierFunction;

ModifierAlias =
  Identifier;

ModifierFunction =
  ModifierFunctionName OPEN_PARAMS CLOSE_PARAMS |
  ModifierFunctionName OPEN_PARAMS ModifierFunctionArgList CLOSE_PARAMS;

ModifierFunctionName =
  Identifier;

ModifierFunctionArgList =
  (WS ARGS_SEP? WS ModifierFunctionArg)*;
<ModifierFunctionArg> =
  Primitive | Variable;
HideRule =
  KW_HIDE;
FlagsRule =
  FlagRule (WS LS WS FlagRule)*;
FlagRule =
  IgnoreErrorsFlag;
IgnoreErrorsFlag =
  KW_IGNORE_ERRORS;
ModifierBlock =
  ((WS_MAND? TimeoutRule) | (WS_MAND? HeaderRule) | (WS_MAND? MaxAgeRule) | (WS_MAND? SMaxAgeRule))+;
TimeoutRule =
  KW_TIMEOUT WS EQUALS_SIGN? WS TimeoutRuleValue;

<TimeoutRuleValue> =
  Integer | Variable;

HeaderRule =
  KW_HEADERS WS_MAND HeaderRuleItem (WS LS WS HeaderRuleItem)*;

HeaderRuleItem =
  HeaderName WS EQUALS_SIGN WS HeaderValue;

HeaderName =
  Identifier;

HeaderValue =
  String | Variable;

MaxAgeRule =
  MaxAgeRuleKey WS EQUALS_SIGN? WS CacheControlRuleValue;
SMaxAgeRule =
  SMaxAgeRuleKey WS EQUALS_SIGN? WS CacheControlRuleValue;

<MaxAgeRuleKey> =
  <"cache-control"> | <"max-age">;

<SMaxAgeRuleKey> =
  <"s-max-age">;

<CacheControlRuleValue> =
  Integer | Variable;

<KW_USE> =
  <"use">;

<KW_METHOD> =
  ("from" | "to" | "into" | "delete" | "update");

ActionRuleKey =
  KW_METHOD;

<KW_AS> =
  <"as">;

<KW_IN> =
  <"in">;

<KW_HEADERS> =
  <"headers">;

<KW_TIMEOUT> =
  <"timeout">;

<KW_WITH> =
  <"with"|"params">;

<KW_ONLY> =
  <"only">;

<KW_HIDE> =
  <"hidden">;

<KW_IGNORE_ERRORS> =
  <"ignore-errors">

<EQUALS_SIGN> =
  <"=">;

<CHAINING_OPERATOR> =
  <".">;

<MOD_OPERATOR> =
  <"->">;

<BEGIN_LIST> =
  <"[">;

<END_LIST> =
  <"]">;

<BEGIN_OBJ> =
  <"{">;

<END_OBJ> =
  <"}">;

<OBJ_SEP> =
  <",">;

<OBJ_PROP_SEP> =
  <":">;

<OPEN_PARAMS> =
  <"(">;

<CLOSE_PARAMS> =
  <")">;

<ARGS_SEP> =
  <",">;

<Identifier> =
  #'[a-zA-Z0-9-_.]*';

<IdentifierWithoutDot> =
  #'[a-zA-Z0-9-_]*';

<IdentifierParameter> =
  #'[a-zA-Z0-9-_.\[\]]*';

<Primitive> =
  Number | String | Boolean | Null;

String =
  #"\".*?\"";
<Boolean> =
  True | False;
True =
  <"true">;
False =
  <"false">;
Null =
  <"null">;
<Number> =
  Integer | Float;
Integer =
 #'[-+]?\d+';
Float =
  #'[+-]?(?=\d*[.eE])(?=\.?\d)\d*\.?\d*(?:[eE][+-]?\d+)?';
<StringChar> =
  Unescaped;
<Unescaped> =
  #"[^\x00-\x1F\x22\x5C]";
<Quote> =
  "\"";
<Digit> =
  #"\d";
<Letter> =
  #"[A-z]";
<NL> =
  <"\n">;
(*List Separator*)
<LS> =
  NL | <","> | Comment;
(*White Space*)
<WS> =
  (SPACE | Comment)*;
<WS_MAND> =
  (SPACE | Comment | NL)+;
<SPACE> =
  <#"\s">;
<Comment> =
  BEGIN_COMMENT <CommentText> END_COMMENT;
<BEGIN_COMMENT> =
  < "//" >;
<END_COMMENT> =
  < #"\n" >;
<CommentChar> =
  #"[^\x00-\x1F\n]";
<CommentText> =
  CommentChar* ;
